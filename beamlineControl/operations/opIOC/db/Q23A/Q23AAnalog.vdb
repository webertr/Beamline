#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("/users/hicksmj/epics/opsDisplay/db/bar.dbd")
#! DBDEND


# Set magnitude for device coming from paramset.vdb.
# It is a PP call, and initiates the scan of this record,
# which ultimately sends a GPIB command to set the current
# of the PS using an asyn record.
record(ai, "$(SubSys):$(Device):$(Param):SetDevice") {
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(FLNK, "$(SubSys):$(Device):$(Param):ParseSet")
  field(PREC, "$(Prec)")
}

# Put Current Value into GPIB String
record(scalcout, "$(SubSys):$(Device):$(Param):ParseSet") {
  field(CALC, "PRINTF('ISET %1.4f',A)+AA")
  field(INPA, "$(SubSys):$(Device):$(Param):SetDevice.VAL")
  field(OUT, "$(SubSys):$(Device):$(Param):SendSet.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(SCAN, "Passive")
  field(PREC, "1")
  field(INAA, "$(SubSys):$(Device):Comm:CR:LF2.VAL PP")
}

# Parse string from power supply containing voltage value
record(scalcout, "$(SubSys):$(Device):Volt:ParseRead") {
  field(CALC, "SSCANF(AA, '%*5c%lf')")
  field(INAA, "$(SubSys):$(Device):Volt:GetRead.AINP")
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):Volt:Read")
}

# Voltage is product of voltage value
# and On status.  Thus if supply is off,
# the voltage value will be zero
record(calc, "$(SubSys):$(Device):Volt:Read") {
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):SetToChk2")
  field(CALC, "A*B")
  field(INPA, "$(SubSys):$(Device):Volt:ParseRead.VAL")
  field(INPB, "$(SubSys):On:Status.VAL")
  field(EGU, "V")
  field(PREC, "2")
}

# Value of PSET in the Previous scan.
# If the pset is changing from scan to scan, the PSET-Pread<PDiff will not be used.
# Checking this condition is difficult while PSET is changing
# because it changes so much faster than PREAD does.
record(calcout, "$(SubSys):$(Device):$(Param):SetToChk2") {
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):SetToChk")
  field(CALC, "A")
  field(INPA, "$(SubSys):$(Device):$(Param):SetToChk.VAL")
  field(PREC, "4")
}

# Current Value of PSET to be compared with the value of
# PSET during the previous scan.  If they are different,
# this indicates that PSET is changing and the PDIFF
# check will not be made
record(calcout, "$(SubSys):$(Device):$(Param):SetToChk") {
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):GetRead")
  field(CALC, "A")
  field(INPA, "$(SubSys):$(Device):$(Param):Set")
  field(PREC, "4")
}

# Parses the current string from the asyn record
record(scalcout, "$(SubSys):$(Device):$(Param):ParseRead") {
  field(CALC, "SSCANF(AA, '%*5c%lf')")
  field(INAA, "$(SubSys):$(Device):$(Param):GetRead.AINP")
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):Read")
}

# PDIFF calculation used to check if the difference
# between pset and pread is getting "close" to pdiff.
# This is used to turn pread and pset yellow on the
# operator displays.
record(calc, "$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2") {
  field(DESC, "compare set readback values.")
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc")
  field(CALC, "(ABS(A -B) > (.5*C))&(A=D)")
  field(INPA, "$(SubSys):$(Device):$(Param):SetToChk.VAL ")
  field(INPB, "$(SubSys):$(Device):$(Param):Read.VAL")
  field(INPC, "$(SubSys):$(Device):$(Param):PDIFF PP")
  field(INPD, "$(SubSys):$(Device):$(Param):SetToChk2.VAL")
}

# Checking the PSET-PREAD<Pdiff requirement.
# 
# If the pset has changed once the current has
# been read (the A+D condition in the calc field)
# , the PSET-Pread<PDiff will not be used.
# Checking this condition is difficult while PSET is changing
# because it changes so much faster than PREAD does.
# 
# The value is read in BeamInterlockCondition, and used to
# set an actual interlock.
# 
# The output only happens when the condition are met and
# causes a message to be outputed to the CCC.
record(calcout, "$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc") {
  field(DESC, "compare set readback values.")
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2")
  field(CALC, "(((ABS(A -B)) > C)&(A=D))")
  field(INPA, "$(SubSys):$(Device):$(Param):SetToChk.VAL ")
  field(INPB, "$(SubSys):$(Device):$(Param):Read.VAL")
  field(INPC, "$(SubSys):$(Device):$(Param):PDIFF PP")
  field(INPD, "$(SubSys):$(Device):$(Param):SetToChk2.VAL")
  field(OUT, "$(SubSys):$(Device):$(Param):ReadPDIFF:Report.PROC")
  field(OOPT, "Transition To Non-zero")
}

# Log pdiff interlock
record(stringout, "$(SubSys):$(Device):$(Param):ReadPDIFF:Report") {
  field(VAL, "$(SubSys) $(Device) PREAD-PSET Diff Error")
  field(OUT, "CCC:OpsDisplay:System:Write PP")
  field(SDIS, "$(SubSys):InitializingorShuttingDown")
}

# Checks Pread less thanPLow.
# 
# 
# This is read in BeamInterlockCondition.vdb
# and used to set an interlock.
record(calcout, "$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc") {
  field(FLNK, "$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc")
  field(CALC, "(A<B)|(A=B)")
  field(INPA, "$(SubSys):$(Device):$(Param):Read.VAL")
  field(INPB, "$(SubSys):$(Device):$(Param):PLOW")
  field(OUT, "$(SubSys):$(Device):$(Param):PLow:Error:String.PROC PP")
  field(OOPT, "Transition To Non-zero")
  field(DOPT, "Use CALC")
}

# Logs Pread less than or equal to PLow Interlock
record(stringout, "$(SubSys):$(Device):$(Param):PLow:Error:String") {
  field(VAL, "$(SubSys) $(Device) < PLow ")
  field(OUT, "CCC:OpsDisplay:System:Write CC PP")
  field(SDIS, "$(SubSys):InitializingorShuttingDown")
}

# Holds the PREAD value.
# 
# Current value is zero if device is off
record(calc, "$(SubSys):$(Device):$(Param):Read") {
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):HB:ReadError")
  field(CALC, "(A>0)*A*B")
  field(INPA, "$(SubSys):$(Device):$(Param):ParseRead.VAL")
  field(INPB, "$(SubSys):On:Status.VAL")
  field(EGU, "A")
  field(PREC, "2")
  field(HHSV, "MAJOR")
  field(LLSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
}

# Checks Pread greater than or equal to PHigh.
# 
# This is read in BeamInterlockCondition.vdb
# and used to set an interlock.
# 
# There is an FLINK that initiates the record in
# beaminterlockcondition.vdb to process and check
# the particle beam interlocks.
record(calcout, "$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc") {
  field(INPA, "$(SubSys):$(Device):$(Param):Read.VAL")
  field(INPB, "$(SubSys):$(Device):$(Param):PHIGH")
  field(OUT, "$(SubSys):$(Device):$(Param):PHigh:Error:String.PROC PP")
  field(CALC, "(A>B)|(A=B)")
  field(OOPT, "Transition To Non-zero")
  field(DOPT, "Use CALC")
  field(FLNK, "$(SubSys):$(Device):ParticleBeam:Interlock:Status")
}

# Logs Pread greater than or equal to PHigh Interlock
record(stringout, "$(SubSys):$(Device):$(Param):PHigh:Error:String") {
  field(VAL, "$(SubSys) $(Device) > PHigh")
  field(OUT, "CCC:OpsDisplay:System:Write CC PP")
  field(SDIS, "$(SubSys):InitializingorShuttingDown")
}

record(asyn, "$(SubSys):$(Device):$(Param):SendSet") {
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(AsynPort)")
  field(ADDR, "$(R)")
  field(TMOD, "Write")
  field(SCAN, "Passive")
  field(TMOT, "1")
}

# Notice the carriage return and line feed after the sent and recieved messages.
record(asyn, "$(SubSys):$(Device):Volt:GetRead") {
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(AsynPort)")
  field(ADDR, "$(R)")
  field(IEOS, "\r\n")
  field(FLNK, "$(SubSys):$(Device):Asyn:Comm:Error:Check")
  field(TMOD, "Write/Read")
  field(TMOT, "1")
  field(DISV, "0")
  field(SDIS, "$(SubSys):On:Status")
  field(AOUT, "VOUT?\r\n")
}

# Notice line feed and carriage return after both the sent and recieved messages.
record(asyn, "$(SubSys):$(Device):$(Param):GetRead") {
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(AsynPort)")
  field(ADDR, "$(R)")
  field(SCAN, "Passive")
  field(IEOS, "\r\n")
  field(FLNK, "$(SubSys):$(Device):$(Param):ParseRead")
  field(TMOD, "Write/Read")
  field(TMOT, "1")
  field(DISV, "0")
  field(SDIS, "$(SubSys):On:Status")
  field(AOUT, "IOUT?\r\n")
}

# This gets the status register. It will look for any hardware and communication Errors.
# See Pg. 61 of the manual for a list of the bit meanings.
record(asyn, "$(SubSys):$(Device):HB:ReadError") {
  field(DTYP, "asynRecordDevice")
  field(PORT, "$(AsynPort)")
  field(ADDR, "$(R)")
  field(TMOD, "Write/Read")
  field(TMOT, "1")
  field(DISV, "0")
  field(SDIS, "$(SubSys):On:Status")
  field(FLNK, "$(SubSys):$(Device):HB:Error:ParseRead")
  field(AOUT, "STS?\r\n")
  field(IEOS, "\r\n")
}

# The status value can't be 0, or there is a problem. It has to be 2.
record(calcout, "$(SubSys):$(Device):HB:Write:Errors2") {
  field(FLNK, "$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc")
  field(CALC, "(A=2)|(A=1)")
  field(INPA, "$(SubSys):$(Device):HB:Error:ParseRead.VAL")
  field(OUT, "$(SubSys):$(Device):HardwareError:Status PP")
  field(OOPT, "When Zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "1")
}

# Gets the string, and parses it out. It should be ST ####. and that number
# is the status number.
record(scalcout, "$(SubSys):$(Device):HB:Error:ParseRead") {
  field(CALC, "SSCANF(AA, '%*4c%d')")
  field(INAA, "$(SubSys):$(Device):HB:ReadError.AINP")
  field(SCAN, "Passive")
  field(FLNK, "$(SubSys):$(Device):HB:Write:Errors2")
}

# This PV is used in Analog and InitializeSuppy to add on the correct
# terminatoring characters on teh strings that are sent to the PS.
record(stringout, "$(SubSys):$(Device):Comm:CR:LF2") {
  field(VAL, "\r\n")
}

record(calcout, "$(SubSys):$(Device):Asyn:Comm:Error:Check") {
  field(CALC, "!(A=0)")
  field(INPA, "$(SubSys):$(Device):Volt:GetRead.STAT")
  field(OUT, "$(SubSys):$(Device):CommError:Status PP")
  field(OOPT, "When Non-zero")
  field(FLNK, "$(SubSys):$(Device):Volt:ParseRead")
}

#! Further lines contain data used by VisualDCT
#! View(467,1647,1.0)
#! Record("$(SubSys):$(Device):$(Param):SetDevice",140,328,0,1,"$(SubSys):$(Device):$(Param):SetDevice")
#! Field("$(SubSys):$(Device):$(Param):SetDevice.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):SetDevice.FLNK")
#! Link("$(SubSys):$(Device):$(Param):SetDevice.FLNK","$(SubSys):$(Device):$(Param):ParseSet")
#! Field("$(SubSys):$(Device):$(Param):SetDevice.VAL",16777215,1,"$(SubSys):$(Device):$(Param):SetDevice.VAL")
#! Record("$(SubSys):$(Device):$(Param):ParseSet",520,352,0,0,"$(SubSys):$(Device):$(Param):ParseSet")
#! Field("$(SubSys):$(Device):$(Param):ParseSet.INPA",16777215,0,"$(SubSys):$(Device):$(Param):ParseSet.INPA")
#! Link("$(SubSys):$(Device):$(Param):ParseSet.INPA","$(SubSys):$(Device):$(Param):SetDevice.VAL")
#! Field("$(SubSys):$(Device):$(Param):ParseSet.OUT",16777215,1,"$(SubSys):$(Device):$(Param):ParseSet.OUT")
#! Link("$(SubSys):$(Device):$(Param):ParseSet.OUT","$(SubSys):$(Device):$(Param):SendSet.AOUT")
#! Field("$(SubSys):$(Device):$(Param):ParseSet.INAA",16777215,0,"$(SubSys):$(Device):$(Param):ParseSet.INAA")
#! Link("$(SubSys):$(Device):$(Param):ParseSet.INAA","$(SubSys):$(Device):Comm:CR:LF2.VAL")
#! Record("$(SubSys):$(Device):Volt:ParseRead",980,1468,0,0,"$(SubSys):$(Device):Volt:ParseRead")
#! Field("$(SubSys):$(Device):Volt:ParseRead.FLNK",16777215,1,"$(SubSys):$(Device):Volt:ParseRead.FLNK")
#! Link("$(SubSys):$(Device):Volt:ParseRead.FLNK","$(SubSys):$(Device):Volt:Read")
#! Field("$(SubSys):$(Device):Volt:ParseRead.INAA",16777215,0,"$(SubSys):$(Device):Volt:ParseRead.INAA")
#! Link("$(SubSys):$(Device):Volt:ParseRead.INAA","$(SubSys):$(Device):Volt:GetRead.AINP")
#! Field("$(SubSys):$(Device):Volt:ParseRead.VAL",16777215,0,"$(SubSys):$(Device):Volt:ParseRead.VAL")
#! Record("$(SubSys):$(Device):Volt:Read",1240,1446,0,0,"$(SubSys):$(Device):Volt:Read")
#! Field("$(SubSys):$(Device):Volt:Read.FLNK",16777215,1,"$(SubSys):$(Device):Volt:Read.FLNK")
#! Link("$(SubSys):$(Device):Volt:Read.FLNK","$(SubSys):$(Device):$(Param):SetToChk2")
#! Field("$(SubSys):$(Device):Volt:Read.INPA",16777215,0,"$(SubSys):$(Device):Volt:Read.INPA")
#! Link("$(SubSys):$(Device):Volt:Read.INPA","$(SubSys):$(Device):Volt:ParseRead.VAL")
#! Field("$(SubSys):$(Device):Volt:Read.INPB",16777215,1,"$(SubSys):$(Device):Volt:Read.INPB")
#! Record("$(SubSys):$(Device):$(Param):SetToChk2",1520,1474,0,0,"$(SubSys):$(Device):$(Param):SetToChk2")
#! Field("$(SubSys):$(Device):$(Param):SetToChk2.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk2.FLNK")
#! Link("$(SubSys):$(Device):$(Param):SetToChk2.FLNK","$(SubSys):$(Device):$(Param):SetToChk")
#! Field("$(SubSys):$(Device):$(Param):SetToChk2.INPA",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk2.INPA")
#! Link("$(SubSys):$(Device):$(Param):SetToChk2.INPA","$(SubSys):$(Device):$(Param):SetToChk.VAL")
#! Field("$(SubSys):$(Device):$(Param):SetToChk2.VAL",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk2.VAL")
#! Record("$(SubSys):$(Device):$(Param):SetToChk",1900,1514,0,0,"$(SubSys):$(Device):$(Param):SetToChk")
#! Field("$(SubSys):$(Device):$(Param):SetToChk.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk.FLNK")
#! Link("$(SubSys):$(Device):$(Param):SetToChk.FLNK","$(SubSys):$(Device):$(Param):GetRead")
#! Field("$(SubSys):$(Device):$(Param):SetToChk.INPA",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk.INPA")
#! Field("$(SubSys):$(Device):$(Param):SetToChk.VAL",16777215,1,"$(SubSys):$(Device):$(Param):SetToChk.VAL")
#! Record("$(SubSys):$(Device):$(Param):ParseRead",4100,1668,0,0,"$(SubSys):$(Device):$(Param):ParseRead")
#! Field("$(SubSys):$(Device):$(Param):ParseRead.INAA",16777215,0,"$(SubSys):$(Device):$(Param):ParseRead.INAA")
#! Link("$(SubSys):$(Device):$(Param):ParseRead.INAA","$(SubSys):$(Device):$(Param):GetRead.AINP")
#! Field("$(SubSys):$(Device):$(Param):ParseRead.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):ParseRead.FLNK")
#! Link("$(SubSys):$(Device):$(Param):ParseRead.FLNK","$(SubSys):$(Device):$(Param):Read")
#! Field("$(SubSys):$(Device):$(Param):ParseRead.VAL",16777215,1,"$(SubSys):$(Device):$(Param):ParseRead.VAL")
#! Record("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2",2840,2032,0,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPA",16777215,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPA")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPA","$(SubSys):$(Device):$(Param):SetToChk.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPB",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPB")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPB","$(SubSys):$(Device):$(Param):Read.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPC",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPC")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPD",16777215,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPD")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.INPD","$(SubSys):$(Device):$(Param):SetToChk2.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.FLNK")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2.FLNK","$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc")
#! Record("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc",2160,2365,0,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.FLNK")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.FLNK","$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc2")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPC",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPC")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPA",16777215,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPA")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPA","$(SubSys):$(Device):$(Param):SetToChk.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPB",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPB")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPB","$(SubSys):$(Device):$(Param):Read.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.OUT",16777215,1,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.OUT")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.OUT","$(SubSys):$(Device):$(Param):ReadPDIFF:Report.PROC")
#! Field("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPD",16777215,0,"$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPD")
#! Link("$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc.INPD","$(SubSys):$(Device):$(Param):SetToChk2.VAL")
#! Record("$(SubSys):$(Device):$(Param):ReadPDIFF:Report",2520,2682,0,1,"$(SubSys):$(Device):$(Param):ReadPDIFF:Report")
#! Field("$(SubSys):$(Device):$(Param):ReadPDIFF:Report.OUT",16777215,1,"$(SubSys):$(Device):$(Param):ReadPDIFF:Report.OUT")
#! Field("$(SubSys):$(Device):$(Param):ReadPDIFF:Report.PROC",16777215,0,"$(SubSys):$(Device):$(Param):ReadPDIFF:Report.PROC")
#! Field("$(SubSys):$(Device):$(Param):ReadPDIFF:Report.SDIS",16777215,1,"$(SubSys):$(Device):$(Param):ReadPDIFF:Report.SDIS")
#! Record("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc",3340,2886,0,0,"$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc")
#! Field("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.OUT",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.OUT")
#! Link("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.OUT","$(SubSys):$(Device):$(Param):PLow:Error:String.PROC")
#! Field("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.INPA",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.INPA")
#! Link("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.INPA","$(SubSys):$(Device):$(Param):Read.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.INPB",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.INPB")
#! Field("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.FLNK")
#! Link("$(SubSys):$(Device):$(Param):PREAD:LTOE:PLOW:Calc.FLNK","$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc")
#! Record("$(SubSys):$(Device):$(Param):PLow:Error:String",3740,2822,0,1,"$(SubSys):$(Device):$(Param):PLow:Error:String")
#! Field("$(SubSys):$(Device):$(Param):PLow:Error:String.OUT",16777215,1,"$(SubSys):$(Device):$(Param):PLow:Error:String.OUT")
#! Field("$(SubSys):$(Device):$(Param):PLow:Error:String.PROC",16777215,0,"$(SubSys):$(Device):$(Param):PLow:Error:String.PROC")
#! Field("$(SubSys):$(Device):$(Param):PLow:Error:String.SDIS",16777215,1,"$(SubSys):$(Device):$(Param):PLow:Error:String.SDIS")
#! Record("$(SubSys):$(Device):$(Param):Read",4700,1771,0,0,"$(SubSys):$(Device):$(Param):Read")
#! Field("$(SubSys):$(Device):$(Param):Read.INPA",16777215,0,"$(SubSys):$(Device):$(Param):Read.INPA")
#! Link("$(SubSys):$(Device):$(Param):Read.INPA","$(SubSys):$(Device):$(Param):ParseRead.VAL")
#! Field("$(SubSys):$(Device):$(Param):Read.FLNK",16777215,0,"$(SubSys):$(Device):$(Param):Read.FLNK")
#! Link("$(SubSys):$(Device):$(Param):Read.FLNK","$(SubSys):$(Device):HB:ReadError")
#! Field("$(SubSys):$(Device):$(Param):Read.VAL",16777215,0,"$(SubSys):$(Device):$(Param):Read.VAL")
#! Field("$(SubSys):$(Device):$(Param):Read.INPB",16777215,1,"$(SubSys):$(Device):$(Param):Read.INPB")
#! Record("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc",3740,3146,0,0,"$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc")
#! Field("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.OUT",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.OUT")
#! Link("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.OUT","$(SubSys):$(Device):$(Param):PHigh:Error:String.PROC")
#! Field("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.INPA",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.INPA")
#! Link("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.INPA","$(SubSys):$(Device):$(Param):Read.VAL")
#! Field("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.INPB",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.INPB")
#! Field("$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):PREAD:GTOE:PHIGH:Calc.FLNK")
#! Record("$(SubSys):$(Device):$(Param):PHigh:Error:String",4060,3122,0,1,"$(SubSys):$(Device):$(Param):PHigh:Error:String")
#! Field("$(SubSys):$(Device):$(Param):PHigh:Error:String.OUT",16777215,1,"$(SubSys):$(Device):$(Param):PHigh:Error:String.OUT")
#! Field("$(SubSys):$(Device):$(Param):PHigh:Error:String.PROC",16777215,0,"$(SubSys):$(Device):$(Param):PHigh:Error:String.PROC")
#! Field("$(SubSys):$(Device):$(Param):PHigh:Error:String.SDIS",16777215,1,"$(SubSys):$(Device):$(Param):PHigh:Error:String.SDIS")
#! Record("$(SubSys):$(Device):$(Param):SendSet",900,400,0,1,"$(SubSys):$(Device):$(Param):SendSet")
#! Field("$(SubSys):$(Device):$(Param):SendSet.AOUT",16777215,0,"$(SubSys):$(Device):$(Param):SendSet.AOUT")
#! Record("$(SubSys):$(Device):Volt:GetRead",180,1325,0,1,"$(SubSys):$(Device):Volt:GetRead")
#! Field("$(SubSys):$(Device):Volt:GetRead.FLNK",16777215,1,"$(SubSys):$(Device):Volt:GetRead.FLNK")
#! Link("$(SubSys):$(Device):Volt:GetRead.FLNK","$(SubSys):$(Device):Asyn:Comm:Error:Check")
#! Field("$(SubSys):$(Device):Volt:GetRead.SDIS",16777215,1,"$(SubSys):$(Device):Volt:GetRead.SDIS")
#! Field("$(SubSys):$(Device):Volt:GetRead.STAT",16777215,1,"$(SubSys):$(Device):Volt:GetRead.STAT")
#! Field("$(SubSys):$(Device):Volt:GetRead.AINP",16777215,1,"$(SubSys):$(Device):Volt:GetRead.AINP")
#! Record("$(SubSys):$(Device):$(Param):GetRead",3120,1411,0,0,"$(SubSys):$(Device):$(Param):GetRead")
#! Field("$(SubSys):$(Device):$(Param):GetRead.FLNK",16777215,1,"$(SubSys):$(Device):$(Param):GetRead.FLNK")
#! Link("$(SubSys):$(Device):$(Param):GetRead.FLNK","$(SubSys):$(Device):$(Param):ParseRead")
#! Field("$(SubSys):$(Device):$(Param):GetRead.SDIS",16777215,1,"$(SubSys):$(Device):$(Param):GetRead.SDIS")
#! Field("$(SubSys):$(Device):$(Param):GetRead.AINP",16777215,1,"$(SubSys):$(Device):$(Param):GetRead.AINP")
#! Record("$(SubSys):$(Device):HB:ReadError",380,1905,0,1,"$(SubSys):$(Device):HB:ReadError")
#! Field("$(SubSys):$(Device):HB:ReadError.SDIS",16777215,1,"$(SubSys):$(Device):HB:ReadError.SDIS")
#! Field("$(SubSys):$(Device):HB:ReadError.FLNK",16777215,1,"$(SubSys):$(Device):HB:ReadError.FLNK")
#! Link("$(SubSys):$(Device):HB:ReadError.FLNK","$(SubSys):$(Device):HB:Error:ParseRead")
#! Field("$(SubSys):$(Device):HB:ReadError.AINP",16777215,1,"$(SubSys):$(Device):HB:ReadError.AINP")
#! Record("$(SubSys):$(Device):HB:Write:Errors2",1320,2246,0,0,"$(SubSys):$(Device):HB:Write:Errors2")
#! Field("$(SubSys):$(Device):HB:Write:Errors2.INPA",16777215,0,"$(SubSys):$(Device):HB:Write:Errors2.INPA")
#! Link("$(SubSys):$(Device):HB:Write:Errors2.INPA","$(SubSys):$(Device):HB:Error:ParseRead.VAL")
#! Field("$(SubSys):$(Device):HB:Write:Errors2.FLNK",16777215,1,"$(SubSys):$(Device):HB:Write:Errors2.FLNK")
#! Link("$(SubSys):$(Device):HB:Write:Errors2.FLNK","$(SubSys):$(Device):$(Param):PREADPSET:PDIFF:Calc")
#! Field("$(SubSys):$(Device):HB:Write:Errors2.OUT",16777215,1,"$(SubSys):$(Device):HB:Write:Errors2.OUT")
#! Record("$(SubSys):$(Device):HB:Error:ParseRead",860,2188,0,0,"$(SubSys):$(Device):HB:Error:ParseRead")
#! Field("$(SubSys):$(Device):HB:Error:ParseRead.FLNK",16777215,1,"$(SubSys):$(Device):HB:Error:ParseRead.FLNK")
#! Link("$(SubSys):$(Device):HB:Error:ParseRead.FLNK","$(SubSys):$(Device):HB:Write:Errors2")
#! Field("$(SubSys):$(Device):HB:Error:ParseRead.INAA",16777215,0,"$(SubSys):$(Device):HB:Error:ParseRead.INAA")
#! Link("$(SubSys):$(Device):HB:Error:ParseRead.INAA","$(SubSys):$(Device):HB:ReadError.AINP")
#! Field("$(SubSys):$(Device):HB:Error:ParseRead.VAL",16777215,1,"$(SubSys):$(Device):HB:Error:ParseRead.VAL")
#! Record("$(SubSys):$(Device):Comm:CR:LF2",260,630,0,1,"$(SubSys):$(Device):Comm:CR:LF2")
#! Field("$(SubSys):$(Device):Comm:CR:LF2.VAL",16777215,0,"$(SubSys):$(Device):Comm:CR:LF2.VAL")
#! Record("$(SubSys):$(Device):Asyn:Comm:Error:Check",560,1414,0,0,"$(SubSys):$(Device):Asyn:Comm:Error:Check")
#! Field("$(SubSys):$(Device):Asyn:Comm:Error:Check.INPA",16777215,0,"$(SubSys):$(Device):Asyn:Comm:Error:Check.INPA")
#! Link("$(SubSys):$(Device):Asyn:Comm:Error:Check.INPA","$(SubSys):$(Device):Volt:GetRead.STAT")
#! Field("$(SubSys):$(Device):Asyn:Comm:Error:Check.OUT",16777215,1,"$(SubSys):$(Device):Asyn:Comm:Error:Check.OUT")
#! Field("$(SubSys):$(Device):Asyn:Comm:Error:Check.FLNK",16777215,1,"$(SubSys):$(Device):Asyn:Comm:Error:Check.FLNK")
#! Link("$(SubSys):$(Device):Asyn:Comm:Error:Check.FLNK","$(SubSys):$(Device):Volt:ParseRead")
#! TextBox(TB0,840,200,140,240,0,"Dialog",24,1,13369395,"Send current set parameter to Q1 power supply",null)
#! TextBox(TB1,878,1168,180,1240,0,"Dialog",24,1,13369395,"Get voltage and current from Q1 power supply\nand check for window interlocks",null)
